#! /usr/bin/env python

import re
from pprint import pprint


def fix_requires(filepath, edit_in_place=False):
    """ Fix the requires in a file. """
    with open(filepath, 'r') as fp:
        requires_found = False
        declared_requires = set()
        declared_provides = set()
        # Load all the requires into a set
        while True:
            next_line = fp.readline()
            if next_line == '' or (requires_found and next_line.strip() != '' and not next_line.startswith('goog.require')):
                break
            elif next_line.startswith('goog.provide'):
                match = re.search("['\"]([^'\"]+)['\"]", next_line)
                declared_provides.add(match.group(1))
            elif next_line.startswith('goog.require'):
                match = re.search("['\"]([^'\"]+)['\"]", next_line)
                declared_requires.add(match.group(1))
                requires_found = True

        contents = fp.read()

    unused_requires = set()
    for req in declared_requires:
        if req not in contents:  # Slow, but since there are usually < 5 of these nobody cares
            unused_requires.add(req)

    if edit_in_place:
        regex = '(' + '|'.join("goog\.require\([\"']%s[\"']\);?\n?" % r for r in unused_requires) + ')'

        with open(filepath, 'r') as fp:
            contents = re.sub(regex, '', fp.read())

        with open(filepath, 'w') as fp:
            fp.write(contents)

    elif len(unused_requires) > 0:
        print filepath
        pprint(unused_requires)
        print ""


if __name__ == '__main__':
    import argparse

    parser = argparse.ArgumentParser(description='Search for unused goog.requires.')
    parser.add_argument('-r', '--remove', action='store_true', help='If passed, remove the found requires from the files')
    parser.add_argument('file', nargs='+', help='One or more files to check for unused requires')
    args = parser.parse_args()

    for filepath in args.file:
        fix_requires(filepath, args.remove)
