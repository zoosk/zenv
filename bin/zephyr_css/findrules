#! /usr/bin/env python
import os
import fnmatch
import re
import sys

from zenvlib import environ, colors, modules

modules.install_if_needed('tinycss')
import tinycss


#: The amount that dimensions are allowed to vary and still be considered a match
change_thresholds = {
    'px': 5,
    'em': 0.5,
    'rem': 0.5
}

modifier_chars = {
    '+',
    '-'
}


def sizeof_fmt(num, suffix='B'):
    """ Format a number of bytes in a file size. """
    for unit in ['','K','M','G','T','P','E','Z']:
        if abs(num) < 1024.0:
            return "%3.1f%s%s" % (num, unit, suffix)
        num /= 1024.0
    return "%.1f%s%s" % (num, 'Yi', suffix)


def decl_matches(decl, prop, value):
    """ Determine if a declaration matches a property/value pair within the error thresholds. """
    if decl.name != prop:
        return False

    value_css = decl.value.as_css()
    dim_value = decl.value[0].value
    dim_unit = decl.value[0].unit

    if value_css == value:
        return True
    elif len(decl.value) == 1 and decl.value[0].type == 'DIMENSION' and dim_unit in change_thresholds and re.match('.*%s[+-]*' % dim_unit, value):
        threshold = change_thresholds[dim_unit]
        modifiers = set()
        while value[-1] in modifier_chars:
            modifiers.add(value[-1])
            value = value[:-1]

        try:
            requested_value = float(value[:-len(dim_unit)])
        except ValueError:
            return False

        if '+' in modifiers and requested_value <= dim_value <= requested_value + threshold:
            return True
        elif '-' in modifiers and requested_value - threshold <= dim_value <= requested_value:
            return True

    return False


def load_combined_stylesheet(product_prefix):
    """ Combine all the stylesheets for the given product into a single Stylesheet object. """
    # Get all the files for the given product
    css_dir = os.path.join(environ.current_work, 'build', 'css')
    if not os.path.exists(css_dir):
        print 'You must build before searching.'
        sys.exit(1)

    css_files = [os.path.join(dirpath, f) for dirpath, dirnames, files in os.walk(css_dir) for f in fnmatch.filter(files, '%s*.css' % product_prefix) if '.gz' not in f]

    total_size = 0
    for filename in css_files:
        total_size += os.path.getsize(filename)

    print 'Loading %s of CSS from %d files...' % (sizeof_fmt(total_size), len(css_files)),
    sys.stdout.flush()

    combined_contents = []
    for filename in css_files:
        with open(filename, 'r') as fp:
            combined_contents.append(fp.read())

    combined_contents = "\n".join(combined_contents)


    # Parse the CSS file
    parser = tinycss.make_parser('page3')
    #sheet = parser.parse_stylesheet_file('build/css/admin.css')
    sheet = parser.parse_stylesheet(combined_contents)

    print 'Done.'
    print 'Loaded %d CSS rule declarations' % len(sheet.rules)

    return sheet


def create_lookup_dicts(sheet):
    """ Given a stylesheet, create dict objects that can be used to look up declarations by selector or vice versa. """
    decls_by_selector = {}
    selectors_by_decl = {}

    for rule in sheet.rules:
        if rule.at_keyword is not None:
            # We don't care about @ rules
            continue

        selector_list = rule.selector.as_css().split(', ')

        # Append all the declarations to each selector listed
        for selector in selector_list:
            if selector not in decls_by_selector:
                decls_by_selector[selector] = {}

            target_dict = decls_by_selector[selector]
            for decl in rule.declarations:
                target_dict[decl.name] = decl

        # Reference each selector from a declaration
        for decl in rule.declarations:
            if decl.name not in selectors_by_decl:
                selectors_by_decl[decl.name] = set()

            target_list = selectors_by_decl[decl.name]
            for selector in selector_list:
                target_list.add(selector)

    return decls_by_selector, selectors_by_decl


if __name__ == '__main__':
    if len(sys.argv) == 1 or sys.argv[1] == '--help':
        progname = os.path.basename(sys.argv[0])
        print '%s: Search for CSS rules that contain the given declarations.' % progname
        print 'Usage: %s product_prefix' % progname
        print 'When using px, em, or rem, you can add + or - to the end of a value to search for close values.'
        sys.exit(1)

    # Load in all the rules
    sheet = load_combined_stylesheet(sys.argv[1])
    decls_by_selector, selectors_by_decl = create_lookup_dicts(sheet)

    # Loop until the user hits Ctrl+C
    while True:
        # Each loop iteration is a new search
        found_selectors = set()
        requested_pairs = {}

        # Loop until the user enters a blank line
        while True:
            print 'Enter a property-value pair to search for, or nothing to search: ',
            line = sys.stdin.readline().rstrip()
            if line.strip() == '':
                break

            # Ignore whitespace around the colon when splitting user input
            pair = re.split('\s*:\s*', line, 1)
            prop = pair[0]
            value = pair[1]
            requested_pairs[prop] = value

            if prop not in selectors_by_decl:
                print '%s was not used anywhere' % prop

            elif len(found_selectors) == 0:
                # Nothing is loaded yet, load in the initial value
                selectors = selectors_by_decl[prop]
                for selector in selectors:
                    for decl in decls_by_selector[selector].values():
                        if decl_matches(decl, prop, value):
                            found_selectors.add(selector)
                            break
                if len(found_selectors) == 0:
                    print 'No rules were found with that declaration.'
                    continue

            else:
                # Filter the previous results using the new criteria from the user
                filtered_results = set()
                for selector in found_selectors:
                    for decl in decls_by_selector[selector].values():
                        if decl_matches(decl, prop, value):
                            filtered_results.add(selector)
                            break
                if len(filtered_results) == 0:
                    print 'No rules were found with that combination.'
                else:
                    found_selectors = filtered_results

        # We've already filtered all the results during the loop; just print them out
        print 'Found the following selectors:'
        for selector in found_selectors:
            print colors.format_string(selector, colors.BOLD)
            decls = decls_by_selector[selector].values()
            for d in decls:
                # Colorize the matches
                value_css = d.value.as_css()
                if d.name in requested_pairs:
                    print colors.format_string('    %s: %s' % (d.name, value_css), colors.BOLD, colors.RED)
                    #print '    \033[1m\033[31m%s: %s\033[0m' % (d.name, value_css)
                else:
                    print '    %s: %s' % (d.name, value_css)
            print ''

        print '#' * 100
        print '#' * 100
        print ''
