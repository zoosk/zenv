#! /usr/bin/env python

import re
import os
import shutil
import subprocess
import sys
import time

from zenvlib import environ, colors, cli


cli.check_usage(
    '%P: Copy all files modified in the last day to your dev instance.\n' +
    'Usage: %P [time_range]\n' +
    '\n' +
    'Different time ranges can be copied by passing time_range in the format <number><smhdw>.\n' +
    'For example, "2d" is 2 days, "4w" is 4 weeks, and "1h30m" is an hour and a half.'
)
cli.fail_without_workspace()


perf_timer = time.time()

if len(sys.argv) == 1:
    time_range = '1d'
else:
    time_range = sys.argv[1]

#### Settings
# The directories to copy files from
COPY_DIRS = [
    'finance',
    'tools',
    'web'
]

# Regexes that match relative paths that won't be copied
EXCLUDED_PATTERNS = [
    re.compile('ZConfig.php$'),
    re.compile('^web/data'),
    re.compile('^web/www/update')
]


# Get environment settings
work_dir = environ.current_work
target_dir = environ.serverdir


# Use the find command to get files that were recently modified
find_args = ['find']
for dirname in COPY_DIRS:
    find_args.append(os.path.join(work_dir, dirname))

find_args.extend(['-mtime', '-' + time_range, '-type', 'f', '-not', '-path', '*.sql'])
recently_changed_files = subprocess.check_output(find_args).split("\n")

if len(recently_changed_files) == 1:  # There is a blank line at the end of find's output
    print 'No files were changed in the specified time period.'
    sys.exit(0)


# Go through the files and copy them to their destinations
copied_files = []
for filename in recently_changed_files:
    relative_source = filename.replace(work_dir + '/', '')

    if any(re.search(i, relative_source) for i in EXCLUDED_PATTERNS):
        continue

    if len(relative_source) > 0:
        target_file = os.path.join(target_dir, relative_source)
        print 'Copying %s to %s...' % (relative_source, target_file),
        while True:
            try:
                shutil.copyfile(filename, target_file)
                copied_files.append(target_file)
                print colors.format_string('Done', colors.GREEN)
            except IOError, e:
                if e.errno == 2:
                    # This is 'No such file or directory', which we may be able to get around by creating the dir tree
                    missing_dir = os.path.dirname(target_file)
                    if not os.path.exists(missing_dir):
                        print colors.format_string('(Creating missing parent dir %s)' % missing_dir, colors.BLUE),
                        os.makedirs(missing_dir)
                        continue

                print colors.format_string('Failed: %s' % e, colors.RED)

            break

print '\nCopy complete in %f seconds, deploying to your VM...' % (time.time() - perf_timer)


# Determine the directory to sync by calculating the common parent of all the changed files
shared_parent = os.path.dirname(copied_files[0]).split('/')
for s in copied_files:
    s = os.path.dirname(s).split('/')
    if len(s) < len(shared_parent):
        shared_parent = shared_parent[:len(s)]
    if not shared_parent:
        break
    for i in xrange(len(shared_parent)):
        if shared_parent[i] != s[i]:
            shared_parent = shared_parent[:i]
            break

shared_parent = '/'.join(shared_parent)

# Sync the files with the dev server
subprocess.call(['synccode', shared_parent])

# Print the total time taken
time_taken = time.time() - perf_timer
print 'Done in %f seconds' % time_taken
