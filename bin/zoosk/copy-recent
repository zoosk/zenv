#! /usr/bin/env python

import re
import os
import shutil
import subprocess
import sys
import time


if len(sys.argv) > 2 or len(sys.argv) == 2 and (sys.argv[1] == '--help' or sys.argv[1] == '-h'):
    print 'copy-recent: Copy all files modified in the last day to your dev instance.'
    print 'Usage: copy-recent [time_range]'
    print ''
    print 'Different time ranges can be copied by passing time_range in the format <number><smhdw>.'
    print 'For example, "2d" is 2 days, "4w" is 4 weeks, and "1h30m" is an hour and a half.'
    sys.exit(1)

if 'ZENV_INITIALIZED' not in os.environ or 'ZENV_CURRENT_WORK' not in os.environ:
    print "You must be using a checkout in ZEnv to use this tool."
    sys.exit(1)

perf_timer = time.time()

if len(sys.argv) == 1:
    time_range = '1d'
else:
    time_range = sys.argv[1]

#### Settings
# The directories to copy files from
copy_dirs = [
    'finance',
    'tools',
    'web'
]
# Regexes that match relative paths that won't be copied
excluded_patterns = [
    re.compile('ZConfig.php$'),
    re.compile('^web/data'),
    re.compile('^web/www/update')
]

# Function to print colored messages if STDOUT is a TTY
if sys.stdout.isatty():
    def print_status(message, success):
        if success:
            print '\x1b[32m%s\x1b[0m' % message
        else:
            print '\x1b[31m%s\x1b[0m' % message
else:
    def print_status(message, success):
        print message


# Get environment settings
work_dir = os.environ['ZENV_CURRENT_WORK']
target_dir = os.environ['ZENV_SERVERDIR']

# Use the find command to get files that were recently modified
find_args = ['find']
for dirname in copy_dirs:
    find_args.append(os.path.join(work_dir, dirname))

find_args.extend(['-mtime', '-' + time_range, '-type', 'f', '-not', '-path', '*.sql'])

recently_changed_files = subprocess.check_output(find_args).split("\n")

if len(recently_changed_files) == 1:  # There is a blank line at the end of find's output
    print 'No files were changed in the specified time period.'
    sys.exit(0)

# Go through the files and copy them to their destinations
for filename in recently_changed_files:
    relative_source = filename.replace(work_dir + '/', '')

    if any(re.search(i, relative_source) for i in excluded_patterns):
        continue

    if len(relative_source) > 0:
        target_file = os.path.join(target_dir, relative_source)
        print 'Copying %s to %s...' % (relative_source, target_file),
        try:
            shutil.copyfile(filename, target_file)
            print_status('Done', True)
        except IOError, e:
            print_status('Failed: %s' % e, False)
            continue

print '\nCopy complete in %f seconds, deploying to your VM...' % (time.time() - perf_timer)

# Sync the files with the dev server
sync_args = ['synccode']
sync_args.extend(os.path.join(target_dir, i) for i in copy_dirs)
subprocess.call(sync_args)

# Print the total time taken
time_taken = time.time() - perf_timer
print 'Done in %f seconds' % time_taken
