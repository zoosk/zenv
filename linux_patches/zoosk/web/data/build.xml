<?xml version="1.0"?>
<project name="util2" default="all" >

	<!-- Universal DB migration script.  Pass the following parameters -->
	<fail unless="dbPath" msg="dbPath is a required parameter" />
	<fail unless="dbName" msg="dbName is a required parameter" />
	<fail unless="dbHostString" msg="dbHostString is a required parameter" />

	<!-- Load properties files -->
	<if>
		<available file="${properties_file}" />
		<then>
			<property file="${properties_file}" override="true" />
		</then>
	</if>
	<if>
		<available file="${pf1}" />
		<then>
			<property file="${pf1}" override="true" />
		</then>
	</if>
	<if>
		<available file="${pf2}" />
		<then>
			<property file="${pf2}" override="true" />
		</then>
	</if>

	<!-- Create temporary directory -->
	<php function="md5" returnProperty="root_hash">
		<param value="${zooskroot_dir}"/>
	</php>
	<property name="temp_dir" value="/tmp/${root_hash}" />
	<mkdir dir="${temp_dir}" />

	<target name="db-install-enhanced" description="Installs an entire database for all clusters">
		<echo msg="DB ${dbName} CLUSTER ALL" />

		<php expression="implode(',', range(1, count(explode(',', '${dbHostString}'))))" returnProperty="clusterNumbers" />
		<foreach list="${clusterNumbers}" param="dbCluster" target="db-install-cluster-enhanced" />
	</target>

	<target name="db-install-cluster-enhanced" description="Installs an entire database on a given cluster">
		<fail unless="dbCluster" msg="dbCluster is a required parameter" />

		<echo msg="DB ${dbName} CLUSTER ${dbCluster}" />

		<php expression="array_shift(explode('|', array_shift(array_slice(explode(',', '${dbHostString}'), ${dbCluster}-1, 1))))" returnProperty="masterHost" />

		<!-- Try/finally so we can make sure to clean up sensitive files -->
		<trycatch>
			<try>
				<!-- Setup access file -->
				<phingcall target="db-setup-access-file" />
				<phingcall target="db-setup-root-access-file" />

				<!-- Run updates -->
				<phingcall target="db-users-enhanced">
					<property name="masterHost" value="${masterHost}" />
				</phingcall>
				<phingcall target="db-schema-enhanced">
					<property name="masterHost" value="${masterHost}" />
				</phingcall>
				<phingcall target="db-data-enhanced">
					<property name="masterHost" value="${masterHost}" />
				</phingcall>
				<phingcall target="db-migration-enhanced">
					<property name="masterHost" value="${masterHost}" />
				</phingcall>
			</try>

			<finally>
				<!-- Cleanup files -->
				<phingcall target="db-teardown-access-file" />
				<phingcall target="db-teardown-root-access-file" />
			</finally>
		</trycatch>

	</target>

	<target name="db-upgrade-enhanced" description="Upgrades the database for all clusters">
		<echo msg="DB ${dbName} CLUSTER ALL" />

		<php expression="implode(',', range(1, count(explode(',', '${dbHostString}'))))" returnProperty="clusterNumbers" />
		<foreach list="${clusterNumbers}" param="dbCluster" target="db-upgrade-cluster-enhanced" />
	</target>

	<target name="db-upgrade-cluster-enhanced" description="Upgrades the database for a given cluster">
		<fail unless="dbCluster" msg="dbCluster is a required parameter" />

		<echo msg="DB ${dbName} CLUSTER ${dbCluster}" />

		<php expression="array_shift(explode('|', array_shift(array_slice(explode(',', '${dbHostString}'), ${dbCluster}-1, 1))))" returnProperty="masterHost" />

		<!-- Try/finally so we can make sure to clean up sensitive files -->
		<trycatch>
			<try>
				<!-- Setup access file -->
				<phingcall target="db-setup-access-file" />

				<!-- Run updates -->
				<phingcall target="db-migration-enhanced">
					<property name="masterHost" value="${masterHost}" />
				</phingcall>
			</try>

			<finally>
				<!-- Cleanup files -->
				<phingcall target="db-teardown-access-file" />
			</finally>
		</trycatch>
	</target>

	<target name="db-setup-access-file" hidden="true">
		<echo msg="DB ${dbName} CLUSTER ${dbCluster}" />

		<!-- Remove old copy if it exists -->
		<if>
			<available file="${temp_dir}/mysql.cnf" />
			<then>
				<delete file="${temp_dir}/mysql.cnf" failonerror="true" />
			</then>
		</if>

		<!-- Copy mysql configuration file -->
		<copy file="mysql.cnf" tofile="${temp_dir}/mysql.cnf" >
			<filterchain>
				<replacetokens begintoken="##" endtoken="##">
					<token key="DB_HOST" value="${masterHost}" />
					<token key="DB_USER" value="${dbusernamemigration}" />
					<token key="DB_PASSWORD" value="${dbpasswordmigration}" />
				</replacetokens>
			</filterchain>
		</copy>
	</target>

	<target name="db-teardown-access-file" hidden="true">
		<echo msg="DB ${dbName} CLUSTER ${dbCluster}" />

		<!-- Delete the config file -->
		<delete file="${temp_dir}/mysql.cnf" failonerror="true" />
	</target>

	<target name="db-setup-root-access-file" hidden="true">
		<echo msg="DB ${dbName} CLUSTER ${dbCluster}" />

		<!-- Remove old copy if it exists -->
		<if>
			<available file="${temp_dir}/mysql_root.cnf" />
			<then>
				<delete file="${temp_dir}/mysql_root.cnf" failonerror="true" />
			</then>
		</if>

		<!-- Copy mysql configuration file -->
		<copy file="mysql.cnf" tofile="${temp_dir}/mysql_root.cnf" >
			<filterchain>
				<replacetokens begintoken="##" endtoken="##">
					<token key="DB_HOST" value="${masterHost}" />
					<token key="DB_USER" value="root" />
					<token key="DB_PASSWORD" value="${rootdbpass}" />
				</replacetokens>
			</filterchain>
		</copy>
	</target>

	<target name="db-teardown-root-access-file" hidden="true">
		<echo msg="DB ${dbName} CLUSTER ${dbCluster}" />

		<!-- Delete the config file -->
		<delete file="${temp_dir}/mysql_root.cnf" failonerror="true" />
	</target>

	<target name='db-schema-enhanced' hidden="true">
		<echo msg="DB ${dbName} CLUSTER ${dbCluster}" />
		<exec passthru="true" checkreturn="true" command="mysql --defaults-extra-file=${temp_dir}/mysql.cnf --default-character-set=utf8 ${dbprefix}${dbName} &lt; ${dbPath}/schema.sql" />
	</target>

	<target name='db-migration-enhanced' hidden="true">
		<echo msg="DB ${dbName} CLUSTER ${dbCluster}" />
		<!-- Delete any pre-existing copies of required files -->
		<if>
			<available file="${temp_dir}/run-migration-enhanced" />
			<then>
				<delete file="${temp_dir}/run-migration-enhanced" failonerror="true" />
			</then>
		</if>

		<!-- Try/finally so we can make sure to clean up sensitive files -->
		<trycatch>
			<try>
				<!-- Copy migration script -->
				<copy file="run-migration-enhanced" tofile="${temp_dir}/run-migration-enhanced" >
					<filterchain>
						<replacetokens begintoken="##" endtoken="##">
							<token key="DB_NAME" value="${dbprefix}${dbName}" />
							<token key="MYSQL_CNF" value="${temp_dir}/mysql.cnf" />
						</replacetokens>
					</filterchain>
				</copy>

				<exec passthru="true" checkreturn="true" command="cd ${dbPath} &amp;&amp; bash ${temp_dir}/run-migration-enhanced"/>
			</try>

			<finally>
				<!-- Cleanup files -->
				<delete file="${temp_dir}/run-migration-enhanced" failonerror="true" />
			</finally>
		</trycatch>
	</target>

	<target name='db-users-enhanced' hidden="true">
		<echo msg="DB ${dbName} CLUSTER ${dbCluster}" />
		<!-- Delete any pre-existing copies of required files -->
		<if>
			<available file="${temp_dir}/create.sql" />
			<then>
				<delete file="${temp_dir}/create.sql" failonerror="true" />
			</then>
		</if>

		<!-- Try/finally so we can make sure to clean up sensitive files -->
		<trycatch>
			<try>
				<!-- Copy creation script -->
				<copy file="create.sql" tofile="${temp_dir}/create.sql" >
					<filterchain>
						<replacetokens begintoken="##" endtoken="##">
							<token key="DB_HOST" value="${masterHost}" />
							<token key="DB_NAME" value="${dbprefix}${dbName}" />
							<token key="DB_USER" value="${dbusernameutl}" />
							<token key="DB_PASSWORD" value="${dbUserPassword}" />
							<token key="DB_BASEPASS" value="${dbpassword}" />
							<token key="DB_PREFIX" value="${dbprefix}" />
						</replacetokens>
					</filterchain>
				</copy>
				<exec passthru="true" checkreturn="true" command="mysql --defaults-extra-file=${temp_dir}/mysql_root.cnf --default-character-set=utf8 &lt; ${temp_dir}/create.sql" />
			</try>

			<finally>
				<!-- Cleanup files -->
				<delete file="${temp_dir}/create.sql" failonerror="true" />
			</finally>
		</trycatch>
	</target>

	<target name='db-data-enhanced' hidden="true">
		<echo msg="DB ${dbName} CLUSTER ${dbCluster}" />
		<!-- Delete any pre-existing copies of required files -->
		<if>
			<available file="${temp_dir}/data.sql" />
			<then>
				<delete file="${temp_dir}/data.sql" failonerror="true" />
			</then>
		</if>

		<!-- Try/finally so we can make sure to clean up sensitive files -->
		<trycatch>
			<try>
				<!-- Copy data script -->
				<copy file="./${dbPath}/data.sql" tofile="${temp_dir}/data.sql" >
					<filterchain>
						<replacetokens begintoken="##" endtoken="##">
							<token key="DB_HOST" value="${masterHost}" />
							<token key="PUBLISH_DIR" value="${app-publish-dir}" />
							<token key="TOOLS_DIR" value="${toolsroot-dir}" />
							<token key="GEOIP_DIR" value="${datapublish-geoip-dir}" />
						</replacetokens>
					</filterchain>
				</copy>
				<exec passthru="true" checkreturn="true" command="mysql --defaults-extra-file=${temp_dir}/mysql.cnf --default-character-set=utf8 ${dbprefix}${dbName} &lt; ${temp_dir}/data.sql"/>
			</try>

			<finally>
				<!-- Cleanup files -->
				<delete file="${temp_dir}/data.sql" failonerror="true" />
			</finally>
		</trycatch>
	</target>
</project>
